// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  role          UserRole  @default(MEMBER)
  status        UserStatus @default(ACTIVE)
  joinDate      DateTime  @default(now())
  lastActive    DateTime  @updatedAt
  profile       Profile?
  projects      ProjectMember[]
  events        EventParticipant[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio         String?
  skills      String[]
  github      String?
  linkedin    String?
  portfolio   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Project {
  id          String        @id @default(cuid())
  title       String
  description String
  image       String?
  github      String?
  demo        String?
  status      ProjectStatus @default(IN_PROGRESS)
  members     ProjectMember[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ProjectMember {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  role      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String
  date        DateTime
  location    String?
  type        EventType
  participants EventParticipant[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model EventParticipant {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  status    EventStatus @default(REGISTERED)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  ADMIN
  MEMBER
  ALUMNI
}

enum UserStatus {
  ACTIVE
  INACTIVE
  ALUMNI
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum EventType {
  MEETING
  WORKSHOP
  GAME_JAM
  HACKATHON
  SOCIAL
}

enum EventStatus {
  REGISTERED
  ATTENDED
  CANCELLED
} 